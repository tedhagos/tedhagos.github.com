<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Ted's blog'</title>
 <link href="http://tedhagos.com/feed/" rel="self"/>
 <link href="http://tedhagos.com/"/>
 <updated>2013-11-19T23:28:47+08:00</updated>
 <id>http://tedhagos.com/</id>
 <author>
   <name>Ted Hagos</name>
   <email>ted@thelogbox.com</email>
 </author>

 
 <entry>
   <title>Identifiers</title>
   <link href="http://tedhagos.com /java-identifiers"/>
   <updated>2013-11-19T00:00:00+08:00</updated>
   <id>http://tedhagos.com /java-identifiers</id>
   <content type="html">&lt;p&gt;An identifier is any part of your program that you must define for yourself. These include &lt;em&gt;classes, interfaces, methods, variables, parameters&lt;/em&gt; and &lt;em&gt;packages&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You must observe the following rules when creating identifiers. It must:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;consist of alphanumeric characters. You can use the characters a-z, A-Z and 0-9&lt;/li&gt;
&lt;li&gt;not start with a number but it can start with an underscore or a dollar sign&lt;/li&gt;
&lt;li&gt;not have any special characters inside it, e.g. #, &amp;amp;, @ or *&lt;/li&gt;
&lt;li&gt;not be same as java keyword or literal&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Keywords&lt;/h2&gt;

&lt;p&gt;There are 50+ keywords in the Java language but not all of them are in use. The &lt;em&gt;const&lt;/em&gt; and &lt;em&gt;goto&lt;/em&gt; keywords are not in use. The keywords for Java has undergone some subtle changes over the years. There could also be some confusions regarding which keywords are treated as reserved words and which ones are simply literals for the language.&lt;/p&gt;

&lt;p&gt;In the past, the words &lt;em&gt;true, false&lt;/em&gt; and &lt;em&gt;null&lt;/em&gt; appeared as keywords . Sometime in the past, &lt;em&gt;null, true&lt;/em&gt; and &lt;em&gt;false&lt;/em&gt; have stopped being keywords and became known as literal values (From the Java Lang Spec). These are semantics and are probably of interest only to the language lawyers of Java. If your pursuits are more of the practical nature, I suggest not to bother with the semantic difference. The point is you cannot use keywords and literals as variable names or identifiers in your own code lest you will have a problem during compilation. This is the most important reason why you need to be familiar with them.&lt;/p&gt;

&lt;p&gt;It is always best to consult the most recent version of the Java Language Specification when it comes to these things because they are a matter of specification. The keywords are printed here only for ease of reference.&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
  abstract  continue    for             new           switch
  assert        default     goto            package     synchronized
  boolean       do            if                private     this
  break       double        implements  protected   throw
  byte        else        import          public        throws
  case        enum        instanceof    return      transient
  catch       extends       int short     try
  char        final       interface   static        void
  class       finally       long            strictfp    volatile
  const       float       native          super       while
&lt;/pre&gt;


&lt;p&gt;You do not need to memorize all the keywords now, but I think in time you will know them by heart as your practice grows.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Can you tell which ones are valid identifiers? Why? Why not?&lt;/p&gt;

&lt;p&gt;small number&lt;/p&gt;

&lt;p&gt;bignumber&lt;/p&gt;

&lt;p&gt;this-is-a-very-long-identifier_is-it-legal&lt;/p&gt;

&lt;p&gt;IsThisLegal?&lt;/p&gt;

&lt;p&gt;_IsThisLegal&lt;/p&gt;

&lt;p&gt;class_name&lt;/p&gt;

&lt;p&gt;import-no1&lt;/p&gt;

&lt;p&gt;transient&lt;/p&gt;

&lt;p&gt;volatile&lt;/p&gt;

&lt;p&gt;careful-this-is-volatile&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Key concepts</title>
   <link href="http://tedhagos.com /java-key-concepts"/>
   <updated>2013-11-18T00:00:00+08:00</updated>
   <id>http://tedhagos.com /java-key-concepts</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Java is a compiled language.&lt;/strong&gt; You need to write the programming statements in a source file, compile them to produce an executable format or object code and finally run the executable file. If you did not make syntactical mistakes the source code will compile without problems. If you did commit syntactical errors then the compiler will not let you through, you will not be able to produce an executable format of your source program.&lt;/p&gt;

&lt;p&gt;A Java source file (also called a compilation unit) is a simple text file. You can use basic text editors to create and edit a source file. The choice for program editor is at best, a matter of preference. The only requirement for the text editor is it can write in ASCII format &amp;mdash; better yet if it can handle UNICODE. So pick any that catches your fancy.&lt;/p&gt;

&lt;p&gt;A Java source file will bear the extension .java, no matter which platform you are using. Don't worry that the extension doesn't follow the usual three letter format, the popular OS platforms can handle that kind of file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java is an Object Oriented language.&lt;/strong&gt; This has many consequences that affects you as a programmer, but right now, it affects what we can write inside our very first source file. You can write only classes and interfaces inside a source file. For our first example, we will write a class and not an interface &amp;mdash; interfaces are advanced constructs in Java, we will leave that for later. Inside classes, you can write variables, methods and program statements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The source file cannot be ran directly on your platform.&lt;/strong&gt; It needs to be compiled. If you have installed the JDK (Java Development Kit) properly on your platform, you can already use the java compiler. The compiler takes on a source file (or source files) as an argument and turns them into executable files. These files do not have .com or .exe extensions, they have .class extensions instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You cannot run .class files directly on top of your OS.&lt;/strong&gt; Java executables run inside a special environment called the JRE (Java Runtime Environment). To run Java object files, you need to invoke the JRE and pass the name of the Java executable as a command line argument like this — &lt;code class=&quot;codeblock&quot;&gt;$ java executable_file&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Beginning to program</title>
   <link href="http://tedhagos.com /java-beginning-to-program"/>
   <updated>2013-11-18T00:00:00+08:00</updated>
   <id>http://tedhagos.com /java-beginning-to-program</id>
   <content type="html">&lt;p&gt;There are many kinds of Java programs. Some run on webservers (servlet &amp;amp; JSP), some inside browsers (applet) and some on mobile platforms (android). Some Java apps run on the desktop and there are two kinds of those, one with GUI and the other without &amp;mdash; these are called CLI or Command Line Interface applications. We will create a CLI app for this chapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coding-process.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Before we begin writing programs, I suggest that you create a folder for purposes of trying out the samples in this material. It is best to name the folder without special characters or whitespace.&lt;/p&gt;

&lt;p&gt;Create a file named Hello.java. For now, just copy the contents from the sample code below&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* Our first program&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* This is a block comment&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* */&lt;/span&gt;
   
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compile the source file using &lt;code class=&quot;codeblock&quot;&gt;javac Hello.java&lt;/code&gt;. You will have a file named &lt;em&gt;Hello.class&lt;/em&gt; as a result of the compilation. Use the command &lt;code class=&quot;codeblock&quot;&gt;java Hello&lt;/code&gt;. Do not include the extension &lt;em&gt;.class&lt;/em&gt; when running Java programs, only the file name portion of the resulting &lt;em&gt;.class&lt;/em&gt; file is required.&lt;/p&gt;

&lt;p&gt;If you typed your program exactly as it appeared in Fig 1.1 the program should compile without problems. If you encountered any compilation error, to back to the program editor and check the  spelling of each and every word. Make sure you did not miss a curly brace or perhaps spelt &lt;code class=&quot;codeblock&quot;&gt;main()&lt;/code&gt; as &lt;code class=&quot;codeblock&quot;&gt;Main()&lt;/code&gt;. Java is case sensitive &amp;mdash; &lt;em&gt;main&lt;/em&gt; is different from &lt;em&gt;Main&lt;/em&gt;. When you are sure that the program is free from syntactical errors, compile it again, then run.&lt;/p&gt;

&lt;p&gt;The output of the sample code is, of course, &quot;Hello World&quot;. True to tradition of every beginning programmer since Kernighan and Ritchie first started it on the first edition of the C Programming Language in 1969.&lt;/p&gt;

&lt;p&gt;Unexciting as the output maybe, it is simple yet rich enough to get our feet wet in Java programming. You need to get used to the structure of the Hello program because a lot of the codes you will write starts out this way.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first seven lines of the Hello program are &lt;em&gt;comments&lt;/em&gt;. These are non-executable statements and you can put them anywhere &amp;mdash; inside or outside a class. You can write comments in three ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;//&lt;/strong&gt; &amp;mdash; This is an in-line comment, effective only on the current line. Anything to the right of this comment is ignored. This is suitable for commenting individual lines of code&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;codeblock&quot;&gt;/*   */&lt;/code&gt; &amp;mdash; This is a block comment, anything in between the inner asterisks will be ignored by the compiler. These can span multiple lines&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;codeblock&quot;&gt;/**   */&lt;/code&gt; &amp;mdash; Another block comment that is used by JavaDoc, don't worry about this right now. Just experiment with these three for the time being&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;After the comments is a class block. Everything inside the outermost pair of curly braces is the class block. Java is an OO language, and a strict one at that. You cannot write anything meaningul outside a class or interface. Even a simple output to the screen has to be within the context of a class. This is the reason why you need to be very comfortable with the structure of the Hello program as early as now or you will not go very far otherwise.&lt;/p&gt;

&lt;p&gt;A Java class is constructed using the keyword &lt;code class=&quot;codeblock&quot;&gt;class&lt;/code&gt; followed a &lt;em&gt;class name&lt;/em&gt;. The class name is something that you will define, in our example, the name of the class is &lt;em&gt;Hello&lt;/em&gt;. The class name is followed by a pair of curly braces. Anything inside the curly braces constitutes the body of the class.&lt;/p&gt;

&lt;pre&gt;
  
  // cannot write methods and variables here
  // only import, package statements and 
  // comments are allowed outside
  // the class 
  
  class Hello {
    // methods and variables goes here
  }
&lt;/pre&gt;


&lt;p&gt;You might have noticed that our example class name is &lt;em&gt;Hello&lt;/em&gt; and that is stored in a file named &lt;em&gt;Hello.java&lt;/em&gt;. That is incidental and not a requirement at all. It would have been a requirement if we made the class &lt;em&gt;public&lt;/em&gt;. &amp;mdash; the &lt;em&gt;public&lt;/em&gt; keyword is an access modifier, but don't bother with that for the moment, you will have a chance to study its effects on coding later on.&lt;/p&gt;

&lt;p&gt;If we changed our construction to declare a public class, like in this&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
  public class Hello {
    public static void main(String args[]) {

    }
  }
&lt;/pre&gt;


&lt;p&gt;then it becomes mandatory that the name of class be consistent with the name of the source file. There is a rule in Java programming that a source file can only contain, at most, one public class and if a class is defined as public in a source file, then name of the source file must be consistent with the name of the public class &amp;mdash; this is one of the many rules you need to be acquainted with Java.&lt;/p&gt;

&lt;p&gt;The name of the generated object file was &lt;em&gt;Hello.class&lt;/em&gt; not because the name of source file is &lt;em&gt;Hello.java&lt;/em&gt; but because the name of the class is &lt;em&gt;Hello&lt;/em&gt;. The name of class affects the name of the object file.&lt;/p&gt;

&lt;p&gt;Like most programming languages, a Java program needs an entry point. In this case, that is the &lt;code class=&quot;codeblock&quot;&gt;main()&lt;/code&gt; method &amp;mdash; a method and a function are technically the same. The semantic difference has got something to do with OOP philosophies. We won't bother with that right now, but you need to get used to the term method, rather than function.&lt;/p&gt;

&lt;p&gt;Having a &lt;em&gt;main&lt;/em&gt; method is not a requisite for compilation. It is a runtime requirement. Any class that you will pass on the JRE requires a main function. Not all classes will require this function, only those classes that you will use as a starting point of your program. In our example, class Hello is a program starting point.&lt;/p&gt;

&lt;p&gt;Java has a very specific format for a main function. The function needs to be &lt;em&gt;public&lt;/em&gt;, &lt;em&gt;static&lt;/em&gt; and &lt;em&gt;void&lt;/em&gt; &amp;mdash; these are reserved words in Java. Each have a specific action but we will defer their discussion for later.&lt;/p&gt;

&lt;p&gt;Inside the main function is &lt;em&gt;System.out.println()&lt;/em&gt; statement. This is a very common command in Java. You can practically put anything inside the parentheses and it will be printed to the screen. The string literal &quot;Hello World&quot; was placed inside the function &lt;em&gt;println()&lt;/em&gt;. String literals are defined be enclosing words using a pair of double quotation marks. You cannot define a string literal using single quotes &amp;mdash; that results into a different action.&lt;/p&gt;

&lt;p&gt;Lastly, all statements in a Java program are terminated by a semicolon. The white space in Java has no meaning. Indentations in Java also have no meaning, hence, you need to use the semicolon to intstruct the compiler that you are done with what you want to say. Best to keep this rule in mind, a lot of the first few rookie mistake you will make is because of the semicolon &amp;mdash; more precisely, the lack of it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>YAPT Pomodoro Timer</title>
   <link href="http://tedhagos.com /yapt"/>
   <updated>2013-11-04T00:00:00+08:00</updated>
   <id>http://tedhagos.com /yapt</id>
   <content type="html">&lt;h2&gt;Use cases&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Countdown, of course. It always count down from 30 minutes. I wrote YAPT to serve a very narrow purpose. It's an egg timer to mark focused activities. 30 minutes makes sense for a focused activity. Besides, if you feel you can hold a focused state of mind more than the mere mortals can, then just fire it up again for another 30 minutes.&lt;/li&gt;
&lt;li&gt;Log each session. locally. Log the date, time of day. It will have a default label. You can override the default label if you want, but that is not necessary. It will save away anyway.&lt;/li&gt;
&lt;li&gt;Send the log file via email. There is only one log file. And there are only two things to do on the log file. 1) Erase it and 2) Send it via email.&lt;/li&gt;
&lt;li&gt;Display only &lt;em&gt;Start and Pause&lt;/em&gt; buttons&lt;/li&gt;
&lt;li&gt;It will automatically pause when a call comes in&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Journal&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013-11-4. Started&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Two Factor Authentication</title>
   <link href="http://tedhagos.com /two-factor-auth-using-sms"/>
   <updated>2013-07-04T00:00:00+08:00</updated>
   <id>http://tedhagos.com /two-factor-auth-using-sms</id>
   <content type="html">&lt;p&gt;One way to achieve a two factor authentication is to couple a simple website login with an SMS  One Time PIN. The username/password (what the user know) is the first layer of security challenge. The web application generates a random number which is valid only for current browser session, sends the generated random number via a third party SMS gateway and asks the user to input the OTP (One Time Pin) in order to satisfy the security challenge.  The OTP will serve as the “what you have” part for our 2 factor authentication.&lt;/p&gt;

&lt;p&gt;This is a poor man's approach to Two Factor authentication. If you are strapped for cash and cannot afford the fancy gadgets that has random number generators (the one that changes every five minutes), then this solution might be good enough in the meantime.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2factor-auth-sms.png&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;cap&quot;&gt;
  Fig 1: Sequence/Workflow of Two Factor Auth
&lt;/div&gt;


&lt;p&gt;It is best (and recommended) to seek third party integration to handle the SMS messaging aspect. A fully functioning SMS gateway is non-trivial to build and develop from scratch. There are lots of SMS gateway providers {TODO: Compile some options for third party SMS gateway providers}&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;THINGS TO CONSIDER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session Management&lt;/strong&gt; will not be very simple. You will need to account the coupling of a randomly generated number (a one time pin, like what most banking sites use). Associate it with the current browser session. The basic idea is to expire that PIN after the browser session has ended. You will need to carefully think about simpistic state management now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Messaging component&lt;/strong&gt; will have to be written. Surely you won't write the SMS-specific codes intermingled with your primary business logic? would you? Depending on what SMS gateway solution you will choose, this messaging component maybe as simple as making a RESTful call or integrating a complicated client-side library. You must consider complexity of integration when choosing a third party solution for th SMS gateway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt; of sending or receiving 1 SMS message. Some services are free, most are not. You need to do some cost analysis here.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;HOME GROWN SMS SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are quite handy on Linux, you can build an SMS gateway of your own. You can try to use &lt;a href=&quot;http://kannel.org&quot;&gt;kannel&lt;/a&gt; or concoct your own using &lt;a href=&quot;http://thelogbox.com/send-receive-sms-messages-usb-modem-linux/&quot;&gt;gnokii, smsd and a USB modem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the hardcore, if you can still remember your RS-232 programming and you can lay your hands on an old copy of the Hayes AT&amp;amp;T GSM modem commands, you can go down that route too.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;ANOTHER SOLUTION FOR 2 FACTOR AUTH&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use the MAC address of the device. That will satisfy the “what you have” requirement. The device itself is the security token. This is simpler and more transparent to the user because of the reduced steps on the workflow.&lt;/p&gt;

&lt;p&gt;This cannot be easily or eleagantly done if the user is on a Desktop machine and accessing the application via a browser. There is no way (yet) to get the MAC address of the machine without resorting to trickeries like ActiveX. The MAC information is not on the TCP packet, it is on the Ether. The Ether information does not make it to the HTTP headers (which is what you have on the server side of the web app)&lt;/p&gt;

&lt;p&gt;And so, the MAC solution might be a better fit for mobile devices. I would suspect that a standard API exists for extracting MAC on IOS or Android.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Java 8</title>
   <link href="http://tedhagos.com /java8-notes"/>
   <updated>2013-07-02T00:00:00+08:00</updated>
   <id>http://tedhagos.com /java8-notes</id>
   <content type="html">&lt;p&gt;You can get Java 8 by way of &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html&quot;&gt;Oracle Early Access&lt;/a&gt;. This is a mainstream, run of the mill installer though. That means you install this on a machine, it takes over the Java environment for that machine. Don't do that! Not to your workhorse and go-to machine. Do it a VM, it is safer and prudent that way.&lt;/p&gt;

&lt;p&gt;On a Debian VM or Debian-ish machines, it can be pulled from the repos&lt;/p&gt;

&lt;pre&gt;

sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer

&lt;/pre&gt;


&lt;p&gt;The Windows installation should be easy to figure out, there is no need to write it here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you cannot go the VM route&lt;/strong&gt; you can still try out Java 8. There is a downloadable version of Java 8 Development Kit at &lt;a href=&quot;http://java8.jdk.net/download.html&quot;&gt;java8.jdk.net/download&lt;/a&gt;that does not require installation. You may need to figure out how to use side-by-side with your other installation of the JDK though. For my Mac setup, this is what I did&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the installer from &lt;a href=&quot;http://java8.jdk.net/download.html&quot;&gt;java8.jdk.net/download&lt;/a&gt; or &lt;a href=&quot;http://java8.jdk.net/download.html&quot;&gt;java8.jdk.net/lambda&lt;/a&gt;, the second one is larger and has lambda support&lt;/li&gt;
&lt;li&gt;Extract the contents and tuck it away somewhere&lt;/li&gt;
&lt;li&gt;Create softlinks to the java8 executables, might be a good idea not to override your usual &lt;strong&gt;java&lt;/strong&gt; and &lt;strong&gt;javac&lt;/strong&gt;. I named mine &lt;strong&gt;java8&lt;/strong&gt; and &lt;strong&gt;javac8&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;

sudo ln -s /somewhere/jdk8/bin/java /usr/bin/java8
sudo ln -s /somewhere/jdk8/bin/javac /usr/bin/javac8

&lt;/pre&gt;


&lt;p&gt;I hope some people in the community will already invest sometime on something like rvm for Java, so I won't have to do this with Java 9&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Presentation &amp; Slides with Beamer class</title>
   <link href="http://tedhagos.com /latex-slides"/>
   <updated>2013-02-13T00:00:00+08:00</updated>
   <id>http://tedhagos.com /latex-slides</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;1. BASIC STRUCTURE OF A PRESENTATION FILE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The whole presentation is inside &lt;code class=&quot;codeblock&quot;&gt;\begin{document} .. \end{document}&lt;/code&gt; .Each slide is enclosed in &lt;code class=&quot;codeblock&quot;&gt;\begin{frame} \end{frame}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sample document is shown below&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
%
% sampledoc.latex
%
\documentclass{beamer}
\begin{document}

\begin{frame}
\frametitle{First}
\framesubtitle{the subtitle}
% content
\end{frame}
 
\begin{frame}
\frametitle{Second}
\framesubtitle{another subtitle}
% content
\end{frame}

\end{document}
&lt;/pre&gt;


&lt;p&gt;Compile the latex source. &lt;code class=&quot;codeblock&quot;&gt;xelatex &amp;lt;filename.tex&gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;2. TITLE PAGES&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
\documentclass{beamer}
 \title[Title of Presentation]{Presentation title}
 \author{Ted Hagos}
 \institute[theLogBox]{theLogBox.com \\
 \medskip {\emph{ted@thelogbox.com}}}
\date{\today}
\begin{document}

\begin{frame}
\titlepage
\end{frame}
\begin{frame}
\frametitle{First}
\framesubtitle{the subtitle}
% content
\end{frame}
 
\begin{frame}
\frametitle{Second}
\framesubtitle{another subtitle}
% content
\end{frame}

\end{document}
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;Build the title information before &lt;code class=&quot;codeblock&quot;&gt;\begin{document}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make the first frame as the title page by calling &lt;code class=&quot;codeblock&quot;&gt;\titlepage&lt;/code&gt; on the first frame&lt;/li&gt;
&lt;/ol&gt;


&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;3. INSERTING SOURCE CODES INTO SLIDES&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
\documentclass{beamer}
\setbeamercovered{transparent}
\usepackage{pxfonts}
\usepackage{listings}
\begin{document}
 
\lstset{language=java,
        numbers=left,
        numberstyle=\tiny,
        showstringspaces=false,
        frame=leftline,
        tabs=2,
        keywordstyle=\color{red}
        }
 
\begin{frame}[fragile]
\frametitle{\texttt{Hello.java}}
\begin{semiverbatim}
  
\begin{lstlisting}
class Hello {
  public static void main(String args[]) {
  
  }
}
\end{lstlisting}
\end{semiverbatim}
\end{frame}

\begin{frame}[fragile]
\frametitle{Second frame}
\begin{semiverbatim}
  
\begin{lstlisting}
class Hello {
  public static void main(String args[]) {
    System.out.println(&quot;Hello Java&quot;);
  }
}
\end{lstlisting}
\end{semiverbatim}
\end{frame}

\end{document}
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;Use the &lt;em&gt;listings&lt;/em&gt; package&lt;/li&gt;
&lt;li&gt;Use the [fragile] option when defining the frame&lt;/li&gt;
&lt;li&gt;Enclose the source code inside &lt;em&gt;listings&lt;/em&gt; environment nested inside a &lt;em&gt;semiverbatim&lt;/em&gt; environment&lt;/li&gt;
&lt;/ol&gt;


&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;4. HOW TO SKIP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;codeblock&quot;&gt;\bigskip&lt;/code&gt; to produce vertical whitespace. You can also use &lt;code class=&quot;codeblock&quot;&gt;\medskip&lt;/code&gt;, it's like &lt;code class=&quot;codeblock&quot;&gt;\bigskip&lt;/code&gt;, only, well, less&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;5. INCLUDING BIBLIOGRAPHIES AND REFERENCES&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
\documentclass{beamer}
\setbeamercovered{transparent}
\usepackage{pxfonts}
\usepackage{listings}
\begin{document}
\lstset{language=java,
        numbers=left,
        numberstyle=\tiny,
        showstringspaces=false,
        frame=leftline,
        tabs=8,
        keywordstyle=\color{red}
        }
 
\begin{frame}[fragile]
\frametitle{\texttt{Hello.java}}
\begin{semiverbatim}
  
\begin{lstlisting}
class Hello {
  public static void main(String args[]) {
  
  }
}
\end{lstlisting}
\end{semiverbatim}
\end{frame}

\begin{frame}[fragile]
\frametitle{A basic Java program}
\framesubtitle{class and method structure}
\bigskip

The following code is the simplest java program you can 
code and run. In the tradition of Hello World program of Kernighan 
and Ritchie, here is the Hello World in Java. 

\begin{semiverbatim}
  
\begin{lstlisting}
class Hello {
  public static void main(String args[]) {
    System.out.println(&quot;Hello Java&quot;);
  }
}
\end{lstlisting}
\end{semiverbatim}
\begin{enumerate}
  \item start with a class
  \item define methods inside a class

\end{enumerate}
\end{frame}

\begin{frame}
\frametitle{Citations}
\bigskip
If you need to cite somebody, like this \cite {cite1} or quote somebody, use 
the \\cite command, you need to define a bibliography somewhere. Also, you 
will need to compile twice (use xelatex 2x) to produce the bibtex entries  
\end{frame}

\begin{frame}
\frametitle{References}
\footnotesize{
\begin{thebibliography}{99}
 \bibitem[The Java Programming Language, 1995]{cite1} James Gosling (1995)
 \newblock The Oak Programming Language.
 \newblock \emph{Sun Micro Papers} 
\end{thebibliography}
}
\end{frame}

\end{document}
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;The bibliography is usually the last frame&lt;/li&gt;
&lt;li&gt;Remember to run &lt;code class=&quot;codeblock&quot;&gt;xelatex&lt;/code&gt; twice when you use &lt;strong&gt;bibitems&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;HOW TO USE PANDOC WITH THE BEAMER CLASS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create beamer slides also using &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;&lt;strong&gt;Pandoc&lt;/strong&gt;&lt;/a&gt;. Say that the following text is written on the file &lt;em&gt;sample-markdown.md&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
% A simple, no-nonsense presentation
% Ted Hagos
% February 13, 2013 

# Part 1

## Title of frame 1
- One is
- followed by 2

## and frame 2
- then three
- after three is four

# In the evening

## this is frame 3
- five, and
- finally six

# Part 2

## frame 4
  - you know
  - the drill

## frame 5
&lt;/pre&gt;


&lt;p&gt;Compile the the markdown file &lt;code class=&quot;codeblock&quot;&gt;pandoc -t beamer sample-markdown.md -o sample-markdown.pdf &lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;REFERENCES&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html&quot;&gt;John Mcfarlane&lt;/a&gt; - Using pandoc with the beamer class&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tex.ac.uk/tex-archive/macros/latex/contrib/beamer/doc/beameruserguide.pdf&quot;&gt;The beamer class&lt;/a&gt; - PDF resources&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Working on API Projects</title>
   <link href="http://tedhagos.com /api-projects"/>
   <updated>2013-01-31T00:00:00+08:00</updated>
   <id>http://tedhagos.com /api-projects</id>
   <content type="html">&lt;p&gt;You will underestimate the efforts on your first API project. Even if you have done many an estimations before and you have participated in many a projects, if none of them were API development, you will be painfully reminded that &lt;strong&gt;there is always a first time for everything&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;API projects are not exactly the same as a web app, or mobile app or a desktop app. They should not be estimated as such. You will spend more effort on development and unit testing on API projects.&lt;/p&gt;

&lt;p&gt;Once you have built the API, you will spend time testing it. The way to test it is to build an application that will use the API. &amp;mdash; shouldn't you actually build a unit test also for that app that will use your API? If you won't, how will you get an insight on how the APIs will be used by others. You need to get into the heads of your users if the API is to be robust.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Deadline, Scope, Resource</title>
   <link href="http://tedhagos.com /fixed-deadlines-moving-scope"/>
   <updated>2013-01-30T00:00:00+08:00</updated>
   <id>http://tedhagos.com /fixed-deadlines-moving-scope</id>
   <content type="html">&lt;p&gt;A hard deadline is common place in software development projects. There is a fixed date when to ship the software out of the door, but the scope of the project and the resources working on them are not necessarily fixed.&lt;/p&gt;

&lt;p&gt;In a perfect world, before a single line of code is ever written, everybody involved in software development (including the client) has a good understanding of what needs to be done, how to get there, how much sweat will it take and for how long everybody sweats. In a perfect world. But it isn't perfect. There are a lot of people involved. A lot of them have stakes. Not everybody is aware of what is going on. Not everybody is on time.&lt;/p&gt;

&lt;p&gt;While Agile methods have taught a lot of people not to do things serially and and not to put things in the critical path, the software development part is not the be-all and end-all of projects. There are other people involved in the value chain of projects, and &lt;span style='text-decoration:line-through'&gt;some&lt;/span&gt; a lot are way up on this chain. These are people waiting to pay for the software (more often than not, they have already paid for the software), people who promised some other people a delivery date for the software, people who manage some people who promise some other people a delivery date for the software, so on and so forth. Like it or not, they can exert a lot of influence on when that software should be out of your door.&lt;/p&gt;

&lt;p&gt;If you have been doing this long enough, you have an overdeveloped thick skin for the silliness of the SDLC (Software Development Life Cycle). If you are new at this, prepare for temper swings, yours and that of others. But keep your cool. Yelling matches and snide emails are not useful &amp;mdash; restraint is.&lt;/p&gt;

&lt;p&gt;There are 3 things you need to be acutely aware of in a project. First, how much work is there (features), how many people do you have to work on them (resource) and how much time do you have (deadline). Those are the basics. If one of these three things move, you need to start taking notes of how it will impact the other two. There is always impact.&lt;/p&gt;

&lt;p&gt;If the scope of the project keeps moving, either the deadline or the resources will stretch. Stretching the resources can mean either extending their hours (beyond 8) or adding warm bodies to the project. Neither has desirable effects. When you stretch people's working hours, their focus is thinly spread, the brain needs a healthy dose of sleep. People who are tired makes more mistakes. You might be able to ship that software after all, but it might not behave like you expect it to. Adding warm bodies is  a pipe dream also, at least on short projects &amp;mdash; the ones you measure in months, not in multi-years. You are throwing new comers to the deep-end, they will need to familiarise and absorb what your other guys have been working on in the past couple of months. They will ask questions and clarify things. You will spend time with them. It will be time you don't have. Familiarise your self with the law of diminishing returns.&lt;/p&gt;

&lt;p&gt;The only thing left to manage is the deadline. And the deadline is very sensitive area to a lot of people. This is the one that causes tempers to flare. When tempers flare, just check your own, there is nothing you can do with other's temper and demeanour. A discussion on moving the deadline will always be a difficult one. Accept it. Prepare for it. Discuss it calmly and intelligently. Don't get sucked into the blame-storming frenzy that ensues. Focus on problem solving.&lt;/p&gt;

&lt;p&gt;The tricky part about running out of time is that it's not always easy to tell when you are. Projects are never late one week or one month. Projects are late one day at a time, it won't seem so bad on the first day you find out you are behind. It might not seem so bad even during the second day &amp;mdash; and there is the rub. How do you tell when it's bad enough? How can you be certain that 4 more hours of delay will negatively impact your team's ability to deliver the software, as agreed and as expected? Where is the point when recovery and salvage are no longer possibilities? Sadly, it's an acquired skill, every project is different. Some or all of the people in your team might be different, a different client, slightly different set of features, different version of libraries you are using  etc. You just need to do it long enough and plenty enough to get better at it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MISC</title>
   <link href="http://tedhagos.com /misc"/>
   <updated>2013-01-01T00:00:00+08:00</updated>
   <id>http://tedhagos.com /misc</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Old Airport Express in OSX Mountain Lion&lt;/strong&gt;. How to salvage an old airport express for use in OSX 10.8 &lt;a href=&quot;https://docs.google.com/document/d/1nFsp9X1TTm8eww6jeO9N8lNgULTGrMrKxtUIa7wHPqE/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Apps Email Solution for Small Groups&lt;/strong&gt;. Some verbiage if you need to convince some people (your bosses) why adopt the Google Business Apps for email. &lt;a href=&quot;https://docs.google.com/document/d/1x8rOCEWaa-h9oxRb1gJJswUw0TvsJ9TwZB6SEzqb8ls/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkSys WiFi Routers and AP&lt;/strong&gt;. Configurations for old linksys wifi routers and access point. These the WRT series. &lt;a href=&quot;https://docs.google.com/document/d/1dNz-ggMjbcSYTjlzehzxN-CO1rSqO-rwbxUaOnm-TKE/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DLink 605L&lt;/strong&gt;. Configuration for DLink WiFi router. &lt;a href=&quot;https://docs.google.com/document/d/1F7nLxoQGhY7UN_aS98X8lKVT2pfgthE6yQWy7pEt29Q/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email Campaigns and Junk Boxes&lt;/strong&gt;. Steps, Tips, Traps and Tricks. How to avoid the junk box when sending an email campaign. &lt;a href=&quot;https://docs.google.com/document/d/1pw_2iU3ZAOjepw-S_NU3xUpkdEh9bf4DJhk5tEsZEF4/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switching to a Jekyll Blog&lt;/strong&gt;. Steps for building a Jekyll Blog. &lt;a href=&quot;https://docs.google.com/document/d/1ZsnGk4nwnK7Za__iwt7Z0QKcfqgWAqSsbj1nyPicjLQ/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Migrating to a new iPad&lt;/strong&gt;. Steps on how to move to a new iPad. &lt;a href=&quot;https://docs.google.com/document/d/1wJhWo0DcQCYCW-HQnk9oQjINBngLFC3Adh2ZADd2mdc/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchronizing Email Data on iOS and MacBook&lt;/strong&gt;. Steps on how to always sync email data on iOS, MacBook and Other Devices without using iCloud. &lt;a href=&quot;https://docs.google.com/document/d/1NgWrdU-3u6E1YbrMCxN1K8ZB4DyZtn7zDKXZejXyeCI/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL on OSX&lt;/strong&gt;. Easiest way to run PostgreSQL on OSX is to download an app from PostgresApp. Follow these steps &lt;a href=&quot;https://docs.google.com/document/d/1gsLSqgB6EV016hxFNLr4oRwvMFODmcqQl1X7sHYNrZU/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crafting Learning Objectives&lt;/strong&gt;. Use Blooms Taxonomy for learning objectives. &lt;a href=&quot;https://docs.google.com/document/d/17DhpUO00UMZIotX1gHLjBNohgxECbEhBd5HKeqUqFZ4/edit?usp=sharing&quot;&gt;Google Drocs MISC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Licensing Source Code&lt;/strong&gt;. &lt;a href=&quot;https://docs.google.com/document/d/1w0NyKaOZCEWBHdZ0AlwWzcYuoUoh08eCxOrP8fTCW5E/edit?usp=sharing&quot;&gt;Google Docs MISC&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Long Fuse</title>
   <link href="http://tedhagos.com /long-fuse"/>
   <updated>2012-12-27T00:00:00+08:00</updated>
   <id>http://tedhagos.com /long-fuse</id>
   <content type="html">&lt;ol&gt;
&lt;li&gt;a device in a bomb that controls the timing of an explosion&lt;/li&gt;
&lt;li&gt;a book by Dr. Eric Haseltine (Long Fuse, Big Bang …)&lt;/li&gt;
&lt;li&gt;long term goals. not the same as task list items, but each item on the task list should keep the spark going. It's the big picture, the balls you don't drop. It's your marshmallow test. They will not be immediately satisfied. It's not the &lt;em&gt;here and now&lt;/em&gt;, so you need to be very patient and very cool about it&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>On the Subject of Focus</title>
   <link href="http://tedhagos.com /notes-on-focus"/>
   <updated>2012-12-23T00:00:00+08:00</updated>
   <id>http://tedhagos.com /notes-on-focus</id>
   <content type="html">&lt;h2&gt;The Brain's Playbook&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Tuesday , January 08 , 2013&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know what I have to do, I've written (and rewritten) them down in the notebook, in the goal papers; yet I don't want to do them. There's a tug-of-war happening inside and the lazy guys seems to be winning.&lt;/p&gt;

&lt;p&gt;My primitive brain is taking over, it's telling me to do nothing, conserve energy (that means sleep) and eat (fast and plenty)—I know that if I take my eyes off the focus for the day, the lazy guy is gonna win. I have to shake this monkey off my back, I've got lots of things to do today—maybe a 15 minute cardio should perk me up again; or coffee, that can do the trick too; just don't put sugar in it because the lazy guy loves sugar.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;The First Two Hours&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Monday , January 07 , 2013&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wake up 2 hours earlier than your usual. After the morning rituals, coffee etc, don't turn on the computer, don't check your email, don't check messages on your phone lest your mind will wander around, will fleet from thought to thought and get filled with &lt;em&gt;little things&lt;/em&gt; — remember what Stephen Covey said on &lt;em&gt;First things First&lt;/em&gt;, rocks first, then stones, then pebbles then sand. Look at the rocks first, attend to the rocks first. Stay disconnected for the first two hours. Use the time to;&lt;/p&gt;

&lt;p&gt;Look at your todo list for the week
Look at your todo list yesterday, if some items fell in the crack, add them to the list for the day. Can't steal time
Write (rewrite) the todo list for the day. See which ones in the list can be done in 2 hours, but can potentially contribute the most to results of the day (80/20). Be brutal about the selection. Those task that will not make the cut are probably less important anyway—either delay them, queue them, delete them altogether.
The first two hours is important, it sets the tone of the day. If you don't set the tone, the hours will pass by and you will wander aimlessly; sure you will respond to emails, answer your phone, engage in conversations—but those are probably the 80% of your activity that gives rise to only 20% of your results (maybe even a lot less than 20%)—do the important stuff first; the important ones for you, that is.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;It's (not) Just a Task List&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Friday , December 28 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you move through your task list for the day, it doesn’t hurt to include what artefact will it produce. What do you expect to get out of it. Sometimes a task doesn’t have an artefact, and that’s fine—but more often than not, a task does have an artefact, even if it is just a single page containing your notes, and how you clarified your thoughts on it.&lt;/p&gt;

&lt;p&gt;It is important to ask what is the victory condition for the task, when do you stop working on it. If the victory condition is unclear, then maybe the task is bigger than what you originally thought it was—tactical or long term goal, perhaps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Low Grade Stress&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Wednesday , December 26 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The sinking feeling you are getting is most likely because you have a lot of thoughts in your mind. Specifically thoughts that make you feel guilty that you haven’t done enough and you wasted way too much time watching movies, checking on your website and scanning through emails—holiday breaks can do that to you.&lt;/p&gt;

&lt;p&gt;After a movie marathon, couple of packs of cigarettes, lots of caffeine and serial eating, it’s a bit difficult to go back to a centered state of thought. You will fall out of rhythm. This happens from time to time, your mind is playing tricks because your short term memories are not about work, they are about decadence—and its a tricky business to catch yourself when you are accelerating towards decadence and lethargy. It usually takes a boss or another authority figure to kick you from behind or give you a whack on the back of your head so you can get buttoned up again.&lt;/p&gt;

&lt;p&gt;That sinking feeling is a stressor, it’s low intensity but it lingers. It’s a lot like the flickering light on your work area or the slow march of traffic you go through everyday. Adrenaline is not going to solve it. You cannot simply explode into action, beat it to a pulp or run away from it.&lt;/p&gt;

&lt;p&gt;Luckily, you already wrote down your list of long fuses — you have written them down, haven’t you? — and you keep a journal pretty regularly—you do keep a journal, don’t you?—A list of long fuses keeps your eyes on the far horizon and your journal records some minutiae of the tactical challenges you were trying to solve before you drifted into the path of aimless-ness. Get back on those, let your mind get on the groove of your task list. You can’t swallow an elephant, you got to slice it up in bite-sized pieces.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Lazy bones, Lazy mind&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Monday December 24 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What exactly is that one thing you are waiting to happen before you do the big things on your list. You’ve already done the Guy Kawasaki advise, M-A-T right? So what’s eating you up. Why are you dragging your feet.&lt;/p&gt;

&lt;p&gt;What conditions are you waiting for. A perfect sunny day wasn’t part of your assumptions, you were gonna do these things regardless — it’s just lethargy isn’t it? or you don’t think you deserve it. You think it’s not ”you”, not within your elements — or its’ too deep for you.&lt;/p&gt;

&lt;p&gt;You need to practice more writing. Articulate exactly what are the things that need to happen first, before the big things on your list start happening.&lt;/p&gt;

&lt;p&gt;Big things on your list mostly falls under the category of multi-step problem. You can’t skip the intervening solutions and jump right to the last problem — maybe that is what’s keeping you, because you think you can&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;To the front or to the side?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Monday December 24 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For most problems, looking for that one right answer is a natural approach to take. Process of elimination is very ingrained and wired deep into our thinking — it’s not a bad way to solve problems. But when you are stomped, the logical approach maybe of limited use. Another way to proceed could be to think sideways, the process of generation. The goal is not to eliminate options, rather to generate them.&lt;/p&gt;

&lt;p&gt;The rub is to know when to move forward and when to move sideways. This is probably why the thinking process is an art form.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Snowballing thoughts&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sunday , December 23 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Try to avoid mental snowballing. This one usually occurs when you are so absorbed into a negative detail. You will begin rehearsing one thought after another in your mind, you might even rehearse conversations that will eventually make you feel agitated.&lt;/p&gt;

&lt;p&gt;Thought rehearsal is good, if it’s a positive thought, if it’s a negative thought, it should be dealt with differently. Out of the 10 (bad) things you think will happen, 1 (or maybe none at all) will happen. Life is short, time is short—such a waste to spend it in paranoia&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;SLOWING DOWN HELPS&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sunday , December 23 , 2012&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don’t try to take on the challenges at once. Speed of response is not always a priority. Sticky problems always have lots of things underneath them — the ones that you don’t see; Remember Pareto? 8 parts of the problem is submerged and unseen. You need to uncover them first before you can solve the 2 parts of it which are visible and are in your face.&lt;/p&gt;

&lt;p&gt;This is why you need to always catch your self when you are in an agitated state. Going from thought to speech in 10 seconds is a dangerous thing. Absorb, relax, collect your thoughts, ask the 5 whys, then formulate a response&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML5 Canvas</title>
   <link href="http://tedhagos.com /html5-canvas"/>
   <updated>2011-04-07T00:00:00+08:00</updated>
   <id>http://tedhagos.com /html5-canvas</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://thelogbox.com/html5-what-you-will-need/&quot;&gt;HTML5 Canvas Tutorial&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OSX Cheatsheet</title>
   <link href="http://tedhagos.com /osx-cheatsheet"/>
   <updated>2008-02-12T00:00:00+08:00</updated>
   <id>http://tedhagos.com /osx-cheatsheet</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;1. SHOW THE ROUTING TABLE&lt;/strong&gt;. &lt;code class=&quot;codeblock&quot;&gt;route print&lt;/code&gt; won't work, try &lt;code class=&quot;codeblock&quot;&gt;netstat -nr&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;2. HIDE OR SHOW HIDDEN FILES IN FINDER&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are always working on the command line, don't even bother with this, a simple &lt;strong&gt;ls -a&lt;/strong&gt; should do the trick. If however, you really do need to display hidden stuff in Finder, here's how to do it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ defaults write com.apple.finder AppleShowAllFiles -bool YES &lt;br/&gt;
  $ defaults write com.apple.finder AppleShowAllFiles -bool NO
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first one obviously shows hidden files and the other hides it. You need kill the Finder app each time you change this setting.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ killall Finder
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;3. HOW TO SET THE HOSTNAME&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ sudo scutil --set HostName anyname_you_want
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;4. JAVA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Java Development Kit (JDK) in your OSX 10.8 Mountain Lion will be wiped out after upgrading to OSX Maverick. During the upgrade from 10.7 to 10.8, typing &lt;code class=&quot;codeblock&quot;&gt;java&lt;/code&gt; on a Terminal.app launched a helper window to install Java &amp;mdash; that is no longer the case. You will need to &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;download java&lt;/a&gt; on your own. Just get it from &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle download site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JAVA 8&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't install the EA release from Oracle, not on your workhorse machine. If you just want to play around with JDK8, get it at &lt;a href=&quot;http://java8.jdk.net/download&quot;&gt;java8.jdk.net/download&lt;/a&gt; or &lt;a href=&quot;http://java8.jdk.net/lambda&quot;&gt;java8.jdk.net/lambda&lt;/a&gt;. Untar the downloaded files, then set softlinks to executables.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ sudo ln -s /somewhere/jdk8/bin/java /usr/bin/java8 &lt;br/&gt;
  $ sudo ln -s /somewhere/jdk8/bin/javac /usr/bin/javac8
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;5. CONTROL ANTI-ALIASING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ defaults -currentHost write -globalDomain AppleFontSmoothing -int 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;WHERE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: Light anti aliasing&lt;/li&gt;
&lt;li&gt;2: Medium&lt;/li&gt;
&lt;li&gt;3: Strong&lt;/li&gt;
&lt;/ul&gt;


&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;6. GET A BETTER PACKAGE MANAGER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Get BREW first&lt;/a&gt;, follow the instruction on the web site of brew, after that it's all good&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ brew install git &lt;br/&gt;
  $ brew install wget &lt;br/&gt;
  $ brew install curl &lt;br/&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;Color the Terminal.app&lt;/strong&gt; for ls&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ vi ~/.bash_profile &lt;br/&gt;
  $ echo &quot;alias ls=&quot;ls -G&quot;&quot; &gt;&gt; ~./bash_profile
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;7. MYSQL&lt;/strong&gt; client can't be found after OSX 10.8 upgrade, it did not disappear  but for some reason, the PATH was messed up, it is still on &lt;em&gt;/usr/ocal/mysql/bin&lt;/em&gt;, just add it the SYSTEM PATH&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ vi ~/.bash_profile &lt;br/&gt;
  $ echo &quot;export PATH=$PATH:/usr/local/mysql/bin:.&quot; &gt;&gt; ~./bash_profile
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;8. PICTURES TAKEN IN PHOTOBOOTH&lt;/strong&gt; are in &lt;em&gt;~/Pictures/Photo Booth Library/Pictures&lt;/em&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;9. PANDOC&lt;/strong&gt; If you want to write in &lt;strong&gt;Markdown&lt;/strong&gt; then publish in HTML, PDF, Latex etc, you will need &lt;strong&gt;pandoc&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you need to &lt;a href=&quot;http://www.haskell.org/haskellwiki/Mac_OS_X&quot;&gt;GET Haskell&lt;/a&gt;, you could try Fink or MacPort but the binaries worked best when I was doodling with this. There is a download link on &lt;a href=&quot;http://www.haskell.org/haskellwiki/Mac_OS_X&quot;&gt;HasKell Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Haskell installer would have installed the &lt;em&gt;cabal&lt;/em&gt; binaries at &lt;em&gt;~/.cabal/bin&lt;/em&gt;, add it to SYSTEM PATH then install pandoc&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ sudo cabal update
$ sudo cabal install pandoc
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;10. USE A BETTER TERMINAL CLIENT&lt;/strong&gt; Get &lt;a href=&quot;http://www.iterm2.com/&quot;&gt;Iterm2&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;11. PHP PEAR&lt;/strong&gt;. This is no longer included in 10.8, maybe it did not even make it in Leopard, I'm not sure. Just &lt;strong&gt;curl&lt;/strong&gt; it&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ curl http://pear.php.net/go-pear.phar &gt; go-pear.phar &lt;br/&gt;
$ sudo php -q go-pear.phar
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;PEAR installation will be at &lt;span class=&quot;codeblock&quot;&gt;~/pear/&lt;/span&gt;, bin, etc and all. Next, update your startup script&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ echo &quot;export PATH=$PATH:~/pear/bin:.&quot; &gt;&gt; ~/.bash_profile
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;12. PHAR &amp;amp; PHP COMPOSER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a php.ini file first. OSX does have it at /private/etc. Don't copy the ini file somewhere else, it needs to be at &lt;em&gt;/private/etc/&lt;/em&gt;. Make sure that php.ini is actually in that directory&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ cd /private/etc &lt;br/&gt;
$ sudo cp php.ini.default php.ini
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following to &lt;em&gt;php.ini&lt;/em&gt;, it's okay to add it at the very beginning, it
didn't give me problems that way&lt;/p&gt;

&lt;pre&gt;
detect_unicode = Off
date.timezone = YourCountry/YourCity
&lt;/pre&gt;


&lt;p&gt;After saving the update php.ini,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ cd /path/to/your/workarea &lt;br/&gt;
$ curl -s http://getcomposer.org/installer | php
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;composer.phar should be downloaded to &lt;code class=&quot;codeblock&quot;&gt;/path/to/your/workarea&lt;/code&gt;. Test it. &lt;span class=&quot;codeblock&quot;&gt; $ php composer.phar&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;13. EDITOR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;
$ brew install vim 
$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle 
$ lynx https://gist.github.com/tedhagos/5916935 (say yes to the download)
$ tar -xzvf gistXXXXXX.tar.gz 
$ cp gistXXXX/.vimrc ~/.vimrc 
$ vim +BundleInstall +qall
&lt;/pre&gt;


&lt;p&gt;More details at &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;gmarik/vundle&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;14. GET A BETTER SCREEN MULTIPLEXER&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ brew install tmux
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is a bit of a setup. You need to create ~/tmux.conf and create a script (the one that handles the shortcuts). The &lt;a href=&quot;https://gist.github.com/tedhagos/5917003&quot;&gt;tmux.conf and tdev.sh are here&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;


&lt;p&gt;&lt;strong&gt;15. COPY/PASTE ON THE CLI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
$ cat somefile | pbcopy &lt;br/&gt;
$ echo pbpaste
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;16. USING A WINDOWS KEYBOARD ON MAC MINI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remap the keyboard for Mac Oriented use. Get the &lt;a href=&quot;http://doublecommand.sourceforge.net/&quot;&gt;Double Command Kernel Extension&lt;/a&gt;. Original instructions from &lt;a href=&quot;http://www.macworld.com/article/42446/2005/01/doublecommand.html&quot;&gt;MacWorld is found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: F12 on the Win Keyboard is the eject button&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;17. RIP AUDIO CDS (FLAC)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don't want to hear any &quot;But you can use iTunes to rip CDs&quot;. I know that. iTunes is very opinionated on how it wants to rip CDs and where to put them. I don't agree with it. Hence, the hacks.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ brew install cdparanoia &lt;br/&gt;
  $ brew install abcde &lt;br/&gt;
  $ touch ~/.abcde.conf
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
  CDROM=/dev/disk1
  OUTPUTTYPE=flac
  INTERACTIVE=n
  PADTRACKS=y
  OUTPUTDIR=~/Music/abcde
  OUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM} - ${TRACKFILE}'
  VAOUTPUTFORMAT='Various/${ALBUMFILE}/${TRACKNUM} - ${TRACKFILE}'
  mungefilename ()
  {
    echo &quot;$@&quot; | sed s,:, -,g | tr /* _+ | tr -d '&quot;?[:cntrl:]
  }
&lt;/pre&gt;


&lt;p&gt;dev/disk1 is where my CD is mounted, find out where yours is mounted. A simple &lt;code class=&quot;codeblock&quot;&gt;df&lt;/code&gt; command should give you some clue where the CD drive is mounted. After that, ripping can start.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ diskutil unmount /dev/disk1 &lt;br/&gt;
  $ abcde &lt;br/&gt;
  $ diskutil eject /dev/disk1&lt;br/&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The unmounting is necessary because abcde works with raw block devices and cannot function when the CD is mounted.&lt;/p&gt;

&lt;p&gt;I shamlessly ripped most of this guide from &lt;a href=&quot;http://hints.macworld.com/article.php?story=2005101620055677&quot;&gt;MacWorld contributed by extempore&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;17.1 RIP AUDIO CDS (MP3)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get &lt;a href=&quot;http://sbooth.org/Max/&quot;&gt;MAX from SBooth&lt;/a&gt;. Work on the archive files and put in &lt;code class=&quot;codeblock&quot;&gt;/Applications&lt;/code&gt; folder or where you want. It's a GUI tool, so it's easy to work with.&lt;/p&gt;

&lt;p&gt;MAX uses musicbrainz.org for the CD metadata, the service is not good enough. GraceNotes, which is used by iTunes is more capable. The problem is, I couldn't find a direct way to connect MAX to GraceNotes. You need a bit of AppleScripting, this solution was the from the SBooth forums as well, the &lt;a href=&quot;http://forums.sbooth.org/viewtopic.php?f=4&amp;amp;t=1930&quot;&gt;link to the original discussion is here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Script in AppleScript, Save it anywhere you can find it easily. The script can be found on the link above (the sbooth forum), but I saved it in gist.github.com, here's the link https://gist.github.com/tedhagos/5845190&lt;/li&gt;
&lt;li&gt;When you insert the CD, iTunes will launch as well (you need this)&lt;/li&gt;
&lt;li&gt;Run the script you created. That will get the meta data of iTunes&lt;/li&gt;
&lt;li&gt;Rip Away&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This solution needs both iTunes and MAX running at the same time. When iTunes grabs the metadata from Gracenotes, the script grabs the metadata from iTunes&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;18. RIP DVDs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just get &lt;a href=&quot;http://handbrake.fr/downloads.php&quot;&gt;Handbrake here&lt;/a&gt; you can figure out the rest&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;19. RIP YOUTUBE VIDEOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ brew install youtube-dl &lt;br/&gt;
  $ brew install ffmpeg &lt;br/&gt;
  $ brew install lame &lt;br/&gt;
  $ youtube-dl http://youtube-video-url
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There's a dedicated note for this &lt;a href=&quot;http://thelogbox.com/rip-youtube-videos-linux-osx/&quot;&gt;somewhere on thelogBox.com&lt;/a&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;20. ACCELERATE DOWNLOADING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ brew install axel &lt;br/&gt;
  $ axel -n 5 protocol://resource-uri
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-n 5&lt;/strong&gt; means you want to use 5 simulateneous threads of download. Sample usage;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;
  $ axel -n 10 http://wordpress.org/latest.zip
&lt;/code&gt;&lt;/p&gt;

&lt;hr/&gt;


&lt;p&gt;&lt;strong&gt;20. SQUEAKY CLEAN HARD DRIVE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Deleting stuff is easy, even applications. Just drag it to Trash can. Cleaning up left overs is the tedious part. It is not particulary difficulty, but annoying. Time is better employed somewhere else. There are better things to do than hunting down left over files; or worse, Googling about &quot;how to clean up your Mac&quot;, swimming through the internet cess pool and trying out blog guides (like the one you are reading). You cannot do that a lot. Just get &lt;strong&gt;Clean My Mac&lt;/strong&gt; or anything paid that catches your fancy. The Mac Store is a good place to start.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;21. BACKUP Mail.App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;&lt;/p&gt;

&lt;p&gt;  $ mkdir MailBackup&lt;/p&gt;

&lt;p&gt;  $ cd MailBackup&lt;/p&gt;

&lt;p&gt;  $ cp -r ~/Library/Mail/V2/ .&lt;/p&gt;

&lt;p&gt;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;22. EXTERNAL DRIVES ARE IN&lt;/strong&gt; &lt;code class=&quot;codeblock&quot;&gt;~/Volumes/&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;23. REALLY SIMPLE MUSIC PLAYER&lt;/strong&gt; &lt;a href=&quot;http://cogx.org/&quot;&gt;CogX&lt;/a&gt;. There were others like Vox (didn't like it). WinAmp on OSX is no longer the WinAmp I remember from 10 years ago (I liked it then when it was simple) &amp;mdash; and iTunes just isn't for me. It won't let leave my Music organization alone&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;23. ASSISTIVE TECHNOLOGY IN OSX MAVERICK&lt;/strong&gt; is no longer in &lt;em&gt;System Preferences &amp;rarr; Accessibility&lt;/em&gt;. It is now in &lt;em&gt;System Preferences &amp;rarr; Security and Privacy &amp;rarr; Privacy&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;24 TEXTEXPANDER DOES NOT WORK IN OSX MAVERICK&lt;/strong&gt;. TextExpander needs assistive technology enabled first before you launch it. See item no. 23 above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;26. SCANNING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use either &lt;em&gt;Image Capture&lt;/em&gt;, &lt;em&gt;Scanner and Printer Queue&lt;/em&gt; or &lt;em&gt;Preview&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This was tested on Leopard, SL, Lion, Mountain Lion and now Maverick&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;27. iPhoto.&lt;/strong&gt; When an iOS device is connected, iPhoto launches. To turn this off. Do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Image Capture app&lt;/li&gt;
&lt;li&gt;On the lower left, look for &lt;em&gt;&quot;Connecting this iPad opens iPhoto&quot;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click the drop down. Choose &lt;em&gt;&quot;No Application&quot;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;28. INTERNET SHARING AND NAT.&lt;/strong&gt; When you share internet connection of either an LTE/3G stick, iPhone, iPad to other workstations, OSX has nasty habit of generating a new subnet. Sometimes it will share at &lt;em&gt;192.168.0&lt;/em&gt; sometimes at &lt;em&gt;192.168.1&lt;/em&gt; at times at &lt;em&gt;192.168.2&lt;/em&gt;, these were the subnets I've noticed and experienced &amp;mdash; there could be more.&lt;/p&gt;

&lt;p&gt;This is bad for a LAN with static IP assignments. This is annoying if you already have a setup of a WiFi shared printer and various servers with static IP identification. So, force OSX to share only at a specific subnet. Code below should do it.&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
sudo defaults write \
   /Library/Preferences/SystemConfiguration/com.apple.nat \
   NAT -dict-add SharingNetworkNumberStart 192.168.3.0
&lt;/pre&gt;


&lt;p&gt;The problem here is, you can only share at this subnet. You cannot connect/share with an LTE stick while your machine is connected to an iOS device (USB) and connected to internet using personal hotspot.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;29. CURRENT WEEK NUMBER&lt;/strong&gt;. This isn't really unique to OSX, but I put it here because sometimes I forget the exact command.&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;

$ cal

    October 2013
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31

&lt;/pre&gt;


&lt;p&gt;This is not what I need. The cal is easy to remember, even its options. As you can see, it does not show the week number.&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;

$ ncal -w
    October 2013
Mo     7 14 21 28
Tu  1  8 15 22 29
We  2  9 16 23 30
Th  3 10 17 24 31
Fr  4 11 18 25
Sa  5 12 19 26
Su  6 13 20 27
   40 41 42 43 44

&lt;/pre&gt;


&lt;p&gt;This is what I need. It's &lt;em&gt;ncal -w&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Common Java Programming Errors</title>
   <link href="http://tedhagos.com /common-errors-java-programming"/>
   <updated>2004-08-26T00:00:00+08:00</updated>
   <id>http://tedhagos.com /common-errors-java-programming</id>
   <content type="html">&lt;h2&gt;1. SEMICOLON&lt;/h2&gt;

&lt;p&gt; A lot of your errors can really be solved by the semicolon. Java ignores white space, you need to tell it that your statement is finished by ending it with a semicolon.&lt;/p&gt;

&lt;p&gt;This isn't tricky to catch. The compiler is going to tell you where exactly you forgot the semicolon.&lt;/p&gt;

&lt;h2&gt;2. RUNNING THE BYTECODE&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;java Hello.class&lt;/code&gt; is not the proper way to run a byte code. You do not include the &lt;em&gt;.class&lt;/em&gt; extension. You simply run it with &lt;code class=&quot;codeblock&quot;&gt;java Hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This error results in a &lt;em&gt;NoDefFoundException&lt;/em&gt;. This error is thrown when you try to use a class file that does not exist &amp;mdash; true enough, there is no &lt;em&gt;Hello.class&lt;/em&gt; class, there is only the &lt;em&gt;Hello&lt;/em&gt; class. Drop the extension of the filename when you want to run your program.&lt;/p&gt;

&lt;h2&gt;3. FORGETTING MAIN&lt;/h2&gt;

&lt;pre&gt;
class Hello {
    
}
&lt;/pre&gt;


&lt;p&gt;This class will compile but it will not run. If you try to run &lt;code class=&quot;codeblock&quot;&gt;java Hello&lt;/code&gt;, you will get a &lt;em&gt;NoSuchMethodError main&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;main&lt;/em&gt; function is not a requirement for compilation but a requirement for runtime. Not all of your classes will need a &lt;em&gt;main&lt;/em&gt; but if you will run them on the command line, then they need a &lt;em&gt;main&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;
class Hello {
  public static void main(String []args){
  }
}
&lt;/pre&gt;


&lt;p&gt;This code will both compile and run.&lt;/p&gt;

&lt;h2&gt;SPELLING AND CASING&lt;/h2&gt;

&lt;p&gt;Wrong spelling and type casing of the &lt;em&gt;main function&lt;/em&gt;. It should be &lt;code class=&quot;codeblock&quot;&gt;public static void main(String args[])&lt;/code&gt;.   Common variations of this mistake&lt;/p&gt;

&lt;pre class=&quot;codeblock&quot;&gt;
Main(String args[])
Main()
main(string args[])
&lt;/pre&gt;


&lt;h2&gt;4. CURLY BRACES&lt;/h2&gt;

&lt;p&gt;Methods, Classes and Interfaces always will contain &lt;em&gt;blocks&lt;/em&gt;. Blocks are made up of a pair of curly braces &amp;mdash; they need to pair up. On trivial codes with just a few levels of nesting, this may not be an issue. On more involved codes with nested blocks, this will be a problem.&lt;/p&gt;

&lt;p&gt;This can be solved by practice and convention. If you use the &lt;em&gt;K &amp;amp; R&lt;/em&gt; way of french bracketing, then stick to it. Don't mix and match &lt;em&gt;C++ style&lt;/em&gt;  with K &amp;amp; R.&lt;/p&gt;

&lt;pre&gt;
  
      class Hello { // opening brace is here

      }
      
&lt;/pre&gt;


&lt;div id=&quot;cap&quot;&gt;K &amp; R bracket&lt;/div&gt;




&lt;pre&gt;
  
      class Hello 
      { // opening brace is here

      }

&lt;/pre&gt;


&lt;div id=&quot;cap&quot;&gt;C++ style&lt;/div&gt;


&lt;p&gt;You can also move away from this problem quite easily by using a real programmer's editor. One that has facility to visually inspect paired curly braces and preferably one with &lt;em&gt;code folding&lt;/em&gt; abilities.&lt;/p&gt;

&lt;p&gt;Now you know one more reason why notepad is not a hard core programmer's editor. It's not a programmer's editor. At all. It never was.&lt;/p&gt;

&lt;h2&gt;5. OBJECT COMPARISSON&lt;/h2&gt;

&lt;pre&gt;
class CompEqual {
  public static void main (String[] args) {
    String a = &quot;Hello&quot;; 
    String b = &quot;World&quot;;
    String c = a + b;

    System.out.println(c == (a + b)); // false
    System.out.println(c.equals(a + b)); // true
  }
}
&lt;/pre&gt;


&lt;div id=&quot;cap&quot;&gt;Object Comparisson&lt;/div&gt;


&lt;p&gt;Use &lt;em&gt;==&lt;/em&gt; to compare primitive values. These things are stored on the &lt;em&gt;stack&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When things are stored on the &lt;em&gt;heap&lt;/em&gt; &amp;mdash; all reference types are stored on the heap &amp;mdash; use the &lt;em&gt;.equals()&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;Remember that &lt;em&gt;variable a&lt;/em&gt; does not really contain &quot;Hello&quot;. The string &quot;Hello&quot; is stored somewhere on the heap. What &lt;em&gt;variable a&lt;/em&gt; contains is the location of &quot;Hello&quot; in the heap. So when you compare &lt;em&gt;c == (a + b)&lt;/em&gt; you are not comparing the string contents, you are comparing memory addresses.&lt;/p&gt;

&lt;h2&gt;6. ARRAY IS ZERO BASED&lt;/h2&gt;

&lt;pre&gt;
class Arr {
  public static void main (String[] args) {
    String arr[] = {&quot;Apple&quot;,&quot;Orange&quot;,&quot;Banana&quot;};
    for (int i =0; i &lt;= arr.length ; i++ ){
      System.out.print(arr[i]);
    } 
  }
}
&lt;/pre&gt;


&lt;div id=&quot;cap&quot;&gt;&lt; is not the same as &lt;=&lt;/div&gt;


&lt;p&gt;&lt;code class=&quot;codeblock&quot;&gt;arr.length&lt;/code&gt; is = 3 but it doesn't mean that the last element's ordinal position is 3. The last element number is 2 because arrays start with 0 &amp;mdash; &lt;em&gt;0 - Apple, 1 - Orange, 2 - Banana&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This results to an &lt;em&gt;ArrayIndexOutOfBounds&lt;/em&gt; exception because the for loop is trying to access element number 3 of &lt;em&gt;arr&lt;/em&gt;, which there is none, it is only up to element number 2.&lt;/p&gt;

&lt;p&gt;The for loop above should have been written as &lt;code class=&quot;codeblock&quot;&gt;for(int i =0; i &amp;lt; arr.length)&lt;/code&gt; or &lt;code class=&quot;codeblock&quot;&gt;for(int i =0; i &amp;lt;= arr.length - 1)&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;7. EMPTY CATCH BLOCKS&lt;/h2&gt;

&lt;pre&gt;
try {
    DriverManager.getConnection();
    // some other statements here
}
catch(Exception e) {
    // NOTHING, ZILCH
}
&lt;/pre&gt;


&lt;p&gt;This is just plain laziness. You think you will have time to get around putting an actual handler later on? What happens when you  get so involved and immersed on other parts of the code. When your 50 liner code turns to 500, this will be very difficult to spot.&lt;/p&gt;

&lt;p&gt;When an actual error happens, the &lt;em&gt;catch&lt;/em&gt; block will activate and guess what happens. Nothing. Zilch. The error is suppressed. You sunk it down. Covered it up. Swept under the rug.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, make errors scream and shout during development. You don't want it with a faint voice or no voice at all. It needs to grab your attention.&lt;/p&gt;

&lt;h2&gt;8. TOO GENERIC EXCEPTION&lt;/h2&gt;

&lt;pre&gt;
try {
    Class.forName();
    DriverManager.getConnection();
}
catch(Exception e) {
    // SOME ERROR HANDLING CODES HERE
}
&lt;/pre&gt;


&lt;div id=&quot;cap&quot;&gt;&lt;/div&gt;


&lt;p&gt;Yeah, this would work. &lt;em&gt;Exception&lt;/em&gt; is a very general class and all possible exceptions will be trapped by this one. Problem here is that when a SQLException occurs, do you think you can tell from the &lt;em&gt;Error Message&lt;/em&gt; that is something related to SQL. You will just get a very generic notification. This is just slightly better than &lt;em&gt;empty catch blocks&lt;/em&gt; &amp;mdash; like I said &amp;mdash; make the errors scream and shout. Really loudly.&lt;/p&gt;

&lt;p&gt;Use the specific exceptions for the catch blocks. If the code on the try block can throw SQLException and ClassCastException, then catch SQLException and ClassCastException. Not the generic &lt;em&gt;Exception&lt;/em&gt; class.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Programming</title>
   <link href="http://tedhagos.com /java-programming"/>
   <updated>2004-02-18T00:00:00+08:00</updated>
   <id>http://tedhagos.com /java-programming</id>
   <content type="html">&lt;p&gt;These are my notes on the Java Programming Language. These notes dates back to the late part of the 1990s. I update them from time to time. These were written primarily as a secondary reference for my students in Asia Pacific College and IBM ACE. It was not meant to be an introduction to computing concepts. It assumes that the reader has some degree of familiarization in basic programming concepts which may have been acquired from experience of another programming language.&lt;/p&gt;

&lt;p&gt;Having said that, what follows will take you through a very quick tour of the Java programming language. This material was not designed to cover all the aspects of the language, as it will be impractical to do so. The breadth and depth of Java, with all the associated technologies have increased drastically since it was first introduced in 1995.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/java/java-content-plan.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code samples and exercises in this material were built using plain editors and the Java Development Kit. The use of simple tools is ideal for learning because there are no magic tricks and convenience facilities (like the case if you use an IDE). As a result, your brain will work harder because you are forced to use primitive tools. In a production environment or consulting environment, this reasoning might not be suitable and hence, the decision for tool selection will be influenced by other factors such as programmer productivity, time schedules and other constraints.&lt;/p&gt;

&lt;p&gt;For the purpose of learning programming in Java &amp;mdash; which is the goal of this material &amp;mdash; we need our brains and faculties to work harder than usual to maximize learning and understanding.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>